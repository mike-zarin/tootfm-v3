// scripts/watch.ts
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
// –ó–∞–ø—É—Å–∫: npx tsx scripts/watch.ts

import { watch } from 'fs';
import { promises as fs } from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  dim: '\x1b[2m'
};

const log = {
  change: (file: string) => console.log(`${colors.yellow}üìù${colors.reset} Changed: ${file}`),
  checking: (what: string) => console.log(`${colors.blue}üîç${colors.reset} Checking ${what}...`),
  success: (msg: string) => console.log(`${colors.green}‚úì${colors.reset} ${msg}`),
  error: (msg: string) => console.log(`${colors.red}‚úó${colors.reset} ${msg}`),
  info: (msg: string) => console.log(`${colors.dim}${msg}${colors.reset}`)
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
const WATCH_DIRS = [
  'app',
  'components', 
  'lib',
  'types'
];

const IGNORE_PATTERNS = [
  'node_modules',
  '.next',
  '.git',
  'dist'
];

// –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
const checkCache = new Map<string, number>();
const DEBOUNCE_MS = 1000;

// –¢–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
interface FileCheck {
  pattern: RegExp;
  checks: string[];
}

const FILE_CHECKS: FileCheck[] = [
  {
    pattern: /storage\.ts$/,
    checks: ['storage-methods', 'data-integrity']
  },
  {
    pattern: /\/api\/.+\/route\.ts$/,
    checks: ['api-endpoint', 'typescript']
  },
  {
    pattern: /\/components\/.+\.tsx$/,
    checks: ['component-imports', 'typescript']
  },
  {
    pattern: /page\.tsx$/,
    checks: ['page-structure', 'ui-flow']
  },
  {
    pattern: /auth.*\.ts$/,
    checks: ['auth-flow', 'env-vars']
  }
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
async function checkFile(filePath: string) {
  const relativePath = path.relative(process.cwd(), filePath);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ debounce
  const lastCheck = checkCache.get(relativePath);
  const now = Date.now();
  
  if (lastCheck && now - lastCheck < DEBOUNCE_MS) {
    return;
  }
  
  checkCache.set(relativePath, now);
  
  log.change(relativePath);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω—ã
  const checks = new Set<string>();
  
  for (const fileCheck of FILE_CHECKS) {
    if (fileCheck.pattern.test(relativePath)) {
      fileCheck.checks.forEach(check => checks.add(check));
    }
  }
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
  for (const check of checks) {
    await runCheck(check, relativePath);
  }
}

// –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runCheck(checkType: string, filePath: string) {
  log.checking(checkType);
  
  try {
    switch (checkType) {
      case 'typescript':
        await execAsync(`npx tsc --noEmit ${filePath}`);
        log.success('TypeScript OK');
        break;
        
      case 'storage-methods':
        const content = await fs.readFile(filePath, 'utf-8');
        const methods = content.match(/async\s+(\w+)\s*\(/g) || [];
        log.info(`Found ${methods.length} methods`);
        break;
        
      case 'api-endpoint':
        const apiContent = await fs.readFile(filePath, 'utf-8');
        const hasGET = apiContent.includes('export async function GET');
        const hasPOST = apiContent.includes('export async function POST');
        
        if (hasGET) log.info('Has GET handler');
        if (hasPOST) log.info('Has POST handler');
        
        if (!hasGET && !hasPOST) {
          log.error('No HTTP handlers found!');
        }
        break;
        
      case 'component-imports':
        const compContent = await fs.readFile(filePath, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        if (compContent.includes("from 'react'") || compContent.includes('from "react"')) {
          log.success('React imported');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—É–∫–æ–≤
        const hooks = compContent.match(/use[A-Z]\w+/g) || [];
        if (hooks.length > 0) {
          log.info(`Uses hooks: ${hooks.join(', ')}`);
        }
        break;
        
      case 'auth-flow':
        log.info('Checking auth configuration...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è auth
        break;
        
      case 'data-integrity':
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ storage –º–µ—Ç–æ–¥—ã –Ω–µ –ª–æ–º–∞—é—Ç data.json
        log.info('Checking data integrity...');
        
        try {
          const dataPath = path.join(process.cwd(), 'data.json');
          const data = await fs.readFile(dataPath, 'utf-8');
          JSON.parse(data); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
          log.success('data.json is valid');
        } catch {
          log.error('data.json is corrupted!');
        }
        break;
        
      case 'ui-flow':
        log.info('UI flow check requires manual review');
        break;
        
      case 'page-structure':
        const pageContent = await fs.readFile(filePath, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (pageContent.includes('export default')) {
          log.success('Has default export');
        } else {
          log.error('Missing default export');
        }
        
        if (pageContent.includes('return')) {
          log.success('Has return statement');
        }
        break;
        
      case 'env-vars':
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        const envContent = await fs.readFile(filePath, 'utf-8');
        const envVars = envContent.match(/process\.env\.(\w+)/g) || [];
        
        if (envVars.length > 0) {
          log.info(`Uses env vars: ${envVars.join(', ')}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
          const envPath = path.join(process.cwd(), '.env.local');
          try {
            const envFile = await fs.readFile(envPath, 'utf-8');
            
            for (const envVar of envVars) {
              const varName = envVar.replace('process.env.', '');
              if (!envFile.includes(`${varName}=`)) {
                log.error(`Missing env var: ${varName}`);
              }
            }
          } catch {
            log.error('.env.local not found');
          }
        }
        break;
    }
  } catch (error) {
    log.error(`Check failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
async function watchDirectory(dir: string) {
  const watcher = watch(dir, { recursive: true }, async (eventType, filename) => {
    if (!filename) return;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã
    if (IGNORE_PATTERNS.some(pattern => filename.includes(pattern))) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ TS/TSX —Ñ–∞–π–ª—ã
    if (!filename.endsWith('.ts') && !filename.endsWith('.tsx')) {
      return;
    }
    
    const fullPath = path.join(dir, filename);
    
    try {
      const stats = await fs.stat(fullPath);
      if (stats.isFile()) {
        await checkFile(fullPath);
      }
    } catch {
      // –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω
    }
  });
  
  return watcher;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}`);
  console.log(`${colors.cyan}‚ïë     tootFM Watch Mode Activated       ‚ïë${colors.reset}`);
  console.log(`${colors.cyan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}\n`);
  
  log.info('Watching for changes in:');
  WATCH_DIRS.forEach(dir => log.info(`  ‚Ä¢ ${dir}/`));
  
  console.log('\n' + colors.dim + 'Press Ctrl+C to stop' + colors.reset + '\n');
  console.log('‚îÄ'.repeat(50) + '\n');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
  const watchers = [];
  
  for (const dir of WATCH_DIRS) {
    const fullPath = path.join(process.cwd(), dir);
    
    try {
      await fs.access(fullPath);
      const watcher = await watchDirectory(fullPath);
      watchers.push(watcher);
    } catch {
      log.error(`Directory not found: ${dir}`);
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
  process.on('SIGINT', () => {
    console.log('\n\n' + colors.yellow + 'Stopping watch mode...' + colors.reset);
    
    watchers.forEach(w => w.close());
    
    console.log(colors.green + 'Watch mode stopped' + colors.reset);
    process.exit(0);
  });
  
  // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
  await new Promise(() => {});
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}