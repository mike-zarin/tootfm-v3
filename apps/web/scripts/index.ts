// scripts/index.ts
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
// –ó–∞–ø—É—Å–∫: npx tsx scripts/index.ts

import { exec } from 'child_process';
import { promisify } from 'util';
import { promises as fs } from 'fs';
import path from 'path';

const execAsync = promisify(exec);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  bold: '\x1b[1m'
};

const log = {
  header: (msg: string) => console.log(`\n${colors.cyan}${colors.bold}‚ïê‚ïê‚ïê ${msg} ‚ïê‚ïê‚ïê${colors.reset}\n`),
  success: (msg: string) => console.log(`${colors.green}‚úì${colors.reset} ${msg}`),
  error: (msg: string) => console.log(`${colors.red}‚úó${colors.reset} ${msg}`),
  warning: (msg: string) => console.log(`${colors.yellow}‚ö†${colors.reset} ${msg}`),
  info: (msg: string) => console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`),
  cmd: (msg: string) => console.log(`${colors.magenta}$${colors.reset} ${msg}`)
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
interface CheckScript {
  name: string;
  file: string;
  description: string;
  category: 'health' | 'ui' | 'api' | 'data' | 'cleanup';
  autoFix?: boolean;
  critical?: boolean;
}

const SCRIPTS: CheckScript[] = [
  // Health checks
  {
    name: 'System Health',
    file: 'check-system.ts',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    category: 'health',
    critical: true
  },
  {
    name: 'Quick Status',
    file: 'quick-check.ts',
    description: '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    category: 'health'
  },
  
  // UI checks
  {
    name: 'UI Flow',
    file: 'analyze-ui-flow.ts',
    description: '–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏',
    category: 'ui',
    critical: true
  },
  {
    name: 'UI Components',
    file: 'check-ui-components.ts',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
    category: 'ui'
  },
  
  // API checks
  {
    name: 'API Tests',
    file: 'test-api.ts',
    description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API endpoints',
    category: 'api',
    critical: true
  },
  {
    name: 'Auth Flow',
    file: 'test-api-auth.ts',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    category: 'api'
  },
  {
    name: 'Spotify Flow',
    file: 'test-spotify-flow.ts',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Spotify',
    category: 'api'
  },
  
  // Data checks
  {
    name: 'Storage Analysis',
    file: 'analyze-storage.ts',
    description: '–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ storage.ts',
    category: 'data'
  },
  {
    name: 'Data Integrity',
    file: 'check-data-integrity.ts',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ data.json',
    category: 'data',
    autoFix: true
  },
  
  // Cleanup
  {
    name: 'Find Duplicates',
    file: 'find-duplicates.ts',
    description: '–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞',
    category: 'cleanup',
    autoFix: true
  },
  {
    name: 'Dead Code',
    file: 'find-dead-code.ts',
    description: '–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞',
    category: 'cleanup',
    autoFix: true
  }
];

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMenu() {
  log.header('tootFM Project Control System');
  
  console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n');
  console.log('  1. üè• Health Check - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('  2. üöÄ Quick Check - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º');
  console.log('  3. üß™ Test All APIs - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ API');
  console.log('  4. üé® Check UI Flow - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å');
  console.log('  5. üóÑÔ∏è Data Analysis - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ storage');
  console.log('  6. üßπ Cleanup - –ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã/–º–µ—Ä—Ç–≤—ã–π –∫–æ–¥');
  console.log('  7. üîß Auto-Fix - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
  console.log('  8. üìä Full Report - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('  9. üö® Critical Only - –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
  console.log('  0. Exit\n');
  
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise<string>((resolve) => {
    readline.question('–í–∞—à –≤—ã–±–æ—Ä: ', (answer: string) => {
      readline.close();
      resolve(answer);
    });
  });
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function runScript(script: CheckScript): Promise<boolean> {
  log.cmd(`npx tsx scripts/${script.file}`);
  
  try {
    const { stdout, stderr } = await execAsync(`npx tsx scripts/${script.file}`);
    
    if (stdout) console.log(stdout);
    if (stderr && !stderr.includes('Warning')) {
      console.error(stderr);
      return false;
    }
    
    return true;
  } catch (error) {
    log.error(`Failed to run ${script.name}`);
    if (error instanceof Error) {
      console.error(error.message);
    }
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
async function runCategory(category: string) {
  const scripts = SCRIPTS.filter(s => s.category === category);
  
  log.header(`Running ${category.toUpperCase()} checks`);
  
  let passed = 0;
  let failed = 0;
  
  for (const script of scripts) {
    log.info(`Running: ${script.description}`);
    const success = await runScript(script);
    
    if (success) {
      passed++;
    } else {
      failed++;
    }
  }
  
  console.log('\n' + '‚îÄ'.repeat(50));
  log.info(`Results: ${passed} passed, ${failed} failed`);
  
  return failed === 0;
}

// –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
async function fullHealthCheck() {
  log.header('FULL HEALTH CHECK');
  
  const categories = ['health', 'ui', 'api', 'data'];
  const results: Record<string, boolean> = {};
  
  for (const category of categories) {
    results[category] = await runCategory(category);
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log.header('HEALTH CHECK SUMMARY');
  
  Object.entries(results).forEach(([category, passed]) => {
    if (passed) {
      log.success(`${category.toUpperCase()}: All checks passed`);
    } else {
      log.error(`${category.toUpperCase()}: Some checks failed`);
    }
  });
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  await generateReport(results);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
async function generateReport(results: Record<string, boolean>) {
  const reportPath = path.join(process.cwd(), 'health-report.md');
  
  let report = `# tootFM Health Report\n\n`;
  report += `Generated: ${new Date().toISOString()}\n\n`;
  
  report += `## Summary\n\n`;
  
  Object.entries(results).forEach(([category, passed]) => {
    const emoji = passed ? '‚úÖ' : '‚ùå';
    report += `- ${emoji} **${category.toUpperCase()}**: ${passed ? 'Passed' : 'Failed'}\n`;
  });
  
  report += `\n## Recommendations\n\n`;
  
  if (!results.ui) {
    report += `- Fix UI flow issues\n`;
    report += `  - Check that Spotify button is removed from auth page\n`;
    report += `  - Restore party list on main page\n`;
    report += `  - Add profile link\n\n`;
  }
  
  if (!results.api) {
    report += `- Fix API endpoints\n`;
    report += `  - Check Spotify token refresh\n`;
    report += `  - Implement unified portrait endpoint\n\n`;
  }
  
  if (!results.data) {
    report += `- Fix data integrity\n`;
    report += `  - Clean up orphaned records\n`;
    report += `  - Validate foreign keys\n\n`;
  }
  
  await fs.writeFile(reportPath, report);
  log.success(`Report saved to: health-report.md`);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
async function autoFix() {
  log.header('AUTO-FIX MODE');
  
  const fixableScripts = SCRIPTS.filter(s => s.autoFix);
  
  log.info(`Found ${fixableScripts.length} auto-fixable issues`);
  
  for (const script of fixableScripts) {
    log.info(`Fixing: ${script.description}`);
    
    // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --fix
    await execAsync(`npx tsx scripts/${script.file} --fix`);
  }
  
  log.success('Auto-fix completed');
}

// –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function criticalOnly() {
  const critical = SCRIPTS.filter(s => s.critical);
  
  log.header('CRITICAL CHECKS ONLY');
  
  for (const script of critical) {
    log.warning(`Critical: ${script.description}`);
    const success = await runScript(script);
    
    if (!success) {
      log.error(`CRITICAL FAILURE: ${script.name}`);
      log.info('Fix this issue before proceeding!');
      return false;
    }
  }
  
  log.success('All critical checks passed');
  return true;
}

// Main execution
async function main() {
  while (true) {
    const choice = await showMenu();
    
    switch (choice) {
      case '1':
        await fullHealthCheck();
        break;
      case '2':
        await runScript(SCRIPTS.find(s => s.file === 'quick-check.ts')!);
        break;
      case '3':
        await runCategory('api');
        break;
      case '4':
        await runCategory('ui');
        break;
      case '5':
        await runCategory('data');
        break;
      case '6':
        await runCategory('cleanup');
        break;
      case '7':
        await autoFix();
        break;
      case '8':
        await fullHealthCheck();
        break;
      case '9':
        await criticalOnly();
        break;
      case '0':
        log.info('Exiting...');
        process.exit(0);
      default:
        log.warning('Invalid choice');
    }
    
    console.log('\n' + '‚ïê'.repeat(60) + '\n');
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

export { runScript, runCategory, fullHealthCheck, criticalOnly };