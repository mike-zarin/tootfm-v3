// apps/web/types/index.ts

export interface User {
  id: string;
  email: string;
  name: string;
  image: string | null;
  createdAt: string;
  updatedAt: string;
  musicProfiles?: MusicProfile[];
}

export interface MusicProfile {
  id: string;
  service: "spotify" | "apple" | "lastfm";
  userId: string;
  accessToken: string;
  refreshToken: string;
  expiresAt: string;
  spotifyId?: string;
  email?: string;
  displayName?: string;
  topTracks: SpotifyTrack[];
  topArtists: SpotifyArtist[];
  lastSyncedAt: string | null;
  createdAt: string;
  updatedAt: string;
}

export interface SpotifyTrack {
  id: string;
  name: string;
  artist: string;
  artists: string[];
  album: string;
  duration: number;
  isrc?: string;
  spotifyId: string;
  imageUrl?: string;
  previewUrl?: string;
  popularity: number;
  uri: string;
}

export interface SpotifyArtist {
  id: string;
  name: string;
  genres: string[];
  popularity: number;
  imageUrl?: string;
}

export interface Party {
  id: string;
  code: string;
  name: string;
  description?: string;
  hostId: string;
  hostName?: string;
  hostImage?: string | null;
  status: "WAITING" | "ACTIVE" | "PAUSED" | "ENDED";
  settings: {
    maxTracks?: number;
    autoPlay?: boolean;
    votingEnabled?: boolean;
    skipThreshold?: number;
  };
  createdAt: string;
  updatedAt: string;
}

export interface Track {
  id: string;
  partyId: string;
  position: number;
  title: string;
  artist: string;
  album?: string;
  duration?: number;
  isrc?: string;
  spotifyId?: string;
  imageUrl?: string;
  previewUrl?: string;
  addedById?: string;
  addedByName?: string;
  playedAt?: string;
  createdAt: string;
  votes?: number; // Счетчик голосов
}

export interface Membership {
  id: string;
  userId: string;
  partyId: string;
  role: "host" | "dj" | "guest";
  joinedAt: string;
  leftAt?: string;
}

export interface Vote {
  id: string;
  userId: string;
  trackId: string;
  type: "up" | "down" | "skip";
  createdAt: string;
}

// API Types
export interface CreatePartyRequest {
  name: string;
  description?: string;
  settings?: {
    maxTracks?: number;
    autoPlay?: boolean;
    votingEnabled?: boolean;
    skipThreshold?: number;
  };
}

export interface JoinPartyRequest {
  code: string;
}

export interface JoinPartyResponse {
  success: boolean;
  id?: string;
  message?: string;
  error?: string;
}

export interface PartyWithCounts extends Party {
  members: number;
  tracks: number;
}

export interface AddTrackRequest {
  spotifyId: string;
  title: string;
  artist: string;
  album?: string;
  duration?: number;
  imageUrl?: string;
  previewUrl?: string;
}

export interface VoteRequest {
  trackId: string;
  type: "up" | "down" | "skip";
}

export interface SearchTracksResponse {
  tracks: SpotifyTrack[];
}
// Spotify Integration Types
export interface SpotifyProfile {
  id: string;
  userId: string;
  accessToken: string;
  refreshToken: string;
  expiresAt: Date;
  spotifyId: string;
  displayName?: string;
  email?: string;
  product?: string;
  country?: string;
  images?: { url: string }[];
  createdAt: Date;
  updatedAt: Date;
}

export interface SpotifyTrack {
  id: string;
  uri: string;
  name: string;
  artists: { id: string; name: string }[];
  album: {
    id: string;
    name: string;
    images: { url: string; width?: number; height?: number }[];
  };
  duration_ms: number;
  explicit: boolean;
  preview_url?: string;
  popularity?: number;
  isrc?: string;
}

export interface SpotifyPlayerState {
  partyId: string;
  isPlaying: boolean;
  currentTrack?: SpotifyTrack;
  position: number;
  deviceId?: string;
  volume: number;
  shuffle: boolean;
  repeat: 'off' | 'context' | 'track';
}
