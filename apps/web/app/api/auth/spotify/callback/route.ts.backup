import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth-options';
import { storage } from '@/lib/storage';
import { spotifyApi, exchangeCodeForTokens } from '@/lib/spotify';

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    const error = searchParams.get('error');

    if (error) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/party?error=spotify_denied`);
    }

    if (!code || !state) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/party?error=invalid_callback`);
    }

    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/auth/signin`);
    }

    // Exchange code for tokens
    const tokens = await exchangeCodeForTokens(code);
    
    // Get Spotify user profile
    spotifyApi.setAccessToken(tokens.access_token);
    const me = await spotifyApi.getMe();

    // Save to storage
    const user = await storage.getUserByEmail(session.user.email);
    if (user) {
      await storage.saveSpotifyProfile({
        id: `spotify_${user.id}`,
        userId: user.id,
        accessToken: tokens.access_token,
        refreshToken: tokens.refresh_token,
        expiresAt: new Date(Date.now() + tokens.expires_in * 1000),
        spotifyId: me.body.id,
        displayName: me.body.display_name,
        email: me.body.email,
        product: me.body.product,
        country: me.body.country,
        images: me.body.images,
        createdAt: new Date(),
        updatedAt: new Date(),
      });
    }

    // Redirect based on state (party ID or default)
    const redirectUrl = state !== 'default' 
      ? `${process.env.NEXTAUTH_URL}/party/${state}`
      : `${process.env.NEXTAUTH_URL}/party`;

    return NextResponse.redirect(`${redirectUrl}?spotify=connected`);
  } catch (error) {
    console.error('Spotify callback error:', error);
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/party?error=spotify_error`);
  }
}