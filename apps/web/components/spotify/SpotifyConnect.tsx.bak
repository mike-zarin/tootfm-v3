'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useToast } from '@/components/ui/use-toast';
import { useSearchParams } from 'next/navigation';

interface SpotifyConnectProps {
  partyId?: string;
  onConnected?: () => void;
}

export function SpotifyConnect({ partyId, onConnected }: SpotifyConnectProps) {
  const [isConnecting, setIsConnecting] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [spotifyUser, setSpotifyUser] = useState<any>(null);
  const { data: session } = useSession();
  const { toast } = useToast();
  const searchParams = useSearchParams();

  // Check if Spotify is connected on mount and when URL params change
  useEffect(() => {
    checkSpotifyStatus();
    
    // Check URL params for connection status
    const spotifyParam = searchParams.get('spotify');
    if (spotifyParam === 'connected') {
      setIsConnected(true);
      toast({
        title: 'Spotify Connected!',
        description: 'Your Spotify account has been linked successfully.',
      });
      if (onConnected) onConnected();
    }
  }, [searchParams]);

  const checkSpotifyStatus = async () => {
    if (!session?.user) return;
    
    try {
      const response = await fetch('/api/music/profiles');
      if (response.ok) {
        const data = await response.json();
        if (data.spotifyProfile) {
          setIsConnected(true);
          setSpotifyUser(data.spotifyProfile);
        }
      }
    } catch (error) {
      console.error('Error checking Spotify status:', error);
    }
  };

  const handleConnect = async () => {
    try {
      setIsConnecting(true);
      
      const response = await fetch(`/api/auth/spotify/connect${partyId ? `?state=${partyId}` : ''}`);
      
      if (!response.ok) {
        throw new Error('Failed to get auth URL');
      }
      
      const data = await response.json();
      
      if (data.url) {
        window.location.href = data.url;
      } else {
        throw new Error('No auth URL received');
      }
    } catch (error) {
      console.error('Spotify connect error:', error);
      toast({
        title: 'Connection Failed',
        description: 'Could not connect to Spotify. Please try again.',
        variant: 'destructive',
      });
      setIsConnecting(false);
    }
  };

  const handleDisconnect = async () => {
    // Optional: Add disconnect functionality
    toast({
      title: 'Coming Soon',
      description: 'Disconnect functionality will be available soon.',
    });
  };

  if (isConnected) {
    return (
      <Card className="p-6 bg-green-50 border-green-200">
        <div className="space-y-4">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
              </svg>
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-green-900">Spotify Connected</h3>
              <p className="text-sm text-green-700">
                {spotifyUser?.displayName || 'Ready to play music'}
              </p>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={handleDisconnect}
              className="text-green-700 border-green-300 hover:bg-green-100"
            >
              Disconnect
            </Button>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex items-center gap-3">
          <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center">
            <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
            </svg>
          </div>
          <div className="flex-1">
            <h3 className="font-semibold">Connect Spotify</h3>
            <p className="text-sm text-muted-foreground">
              Link your Spotify account to play music
            </p>
          </div>
        </div>
        <Button
          className="w-full bg-green-600 hover:bg-green-700"
          onClick={handleConnect}
          disabled={isConnecting}
        >
          {isConnecting ? 'Connecting...' : 'Connect Spotify'}
        </Button>
      </div>
    </Card>
  );
}