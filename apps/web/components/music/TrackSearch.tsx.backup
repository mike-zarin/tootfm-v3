"use client"

// apps/web/components/music/TrackSearch.tsx


import { useState } from 'react';
import { Search, Plus, Music, Clock } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useToast } from '@/components/ui/use-toast';
import { SpotifyTrack } from '@/types';
import Image from 'next/image';

interface TrackSearchProps {
  partyId: string;
  onTrackAdded?: () => void;
}

export function TrackSearch({ partyId, onTrackAdded }: TrackSearchProps) {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<SpotifyTrack[]>([]);
  const [loading, setLoading] = useState(false);
  const [addingTrack, setAddingTrack] = useState<string | null>(null);
  const { toast } = useToast();

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!query.trim()) return;

    setLoading(true);
    try {
      const response = await fetch(`/api/music/search?q=${encodeURIComponent(query)}`);
      if (!response.ok) throw new Error('Search failed');
      
      const data = await response.json();
      setResults(data.tracks);
    } catch (_error) {
      toast({
        title: 'Search failed',
        description: 'Could not search for tracks. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddTrack = async (track: SpotifyTrack) => {
    setAddingTrack(track.id);
    try {
      const response = await fetch(`/api/parties/${partyId}/tracks`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          spotifyId: track.spotifyId,
          title: track.name,
          artist: track.artist,
          album: track.album,
          duration: track.duration,
          imageUrl: track.imageUrl,
          previewUrl: track.previewUrl
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to add track');
      }

      toast({
        title: 'Track added!',
        description: `${track.name} by ${track.artist} has been added to the queue.`
      });

      // Clear the track from results
      setResults(results.filter(r => r.id !== track.id));
      
      // Notify parent component
      if (onTrackAdded) onTrackAdded();
      
    } catch (error: any) {
      toast({
        title: 'Could not add track',
        description: error.message,
        variant: 'destructive'
      });
    } finally {
      setAddingTrack(null);
    }
  };

  const formatDuration = (ms: number) => {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="space-y-4">
      {/* Search Form */}
      <form onSubmit={handleSearch} className="flex gap-2">
        <Input
          type="text"
          placeholder="Search for songs, artists, or albums..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="flex-1"
          disabled={loading}
        />
        <Button type="submit" disabled={loading}>
          <Search className="w-4 h-4 mr-2" />
          Search
        </Button>
      </form>

      {/* Search Results */}
      {results.length > 0 && (
        <div className="space-y-2">
          <h3 className="text-sm font-medium text-gray-500">
            Search Results ({results.length})
          </h3>
          <div className="grid gap-2">
            {results.map((track) => (
              <Card key={track.id} className="p-3">
                <div className="flex items-center gap-3">
                  {/* Album Art */}
                  <div className="relative w-12 h-12 flex-shrink-0">
                    {track.imageUrl ? (
                      <Image
                        src={track.imageUrl}
                        alt={track.album}
                        fill
                        className="object-cover rounded"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-200 rounded flex items-center justify-center">
                        <Music className="w-6 h-6 text-gray-400" />
                      </div>
                    )}
                  </div>

                  {/* Track Info */}
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-sm truncate">
                      {track.name}
                    </p>
                    <p className="text-xs text-gray-500 truncate">
                      {track.artist} â€¢ {track.album}
                    </p>
                  </div>

                  {/* Duration */}
                  <div className="flex items-center gap-1 text-xs text-gray-500">
                    <Clock className="w-3 h-3" />
                    {formatDuration(track.duration)}
                  </div>

                  {/* Add Button */}
                  <Button
                    size="sm"
                    onClick={() => handleAddTrack(track)}
                    disabled={addingTrack === track.id}
                  >
                    {addingTrack === track.id ? (
                      'Adding...'
                    ) : (
                      <>
                        <Plus className="w-4 h-4" />
                      </>
                    )}
                  </Button>
                </div>
              </Card>
            ))}
          </div>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="text-center py-8">
          <p className="text-gray-500">Searching...</p>
        </div>
      )}
    </div>
  );
}