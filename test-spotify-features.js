// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Spotify audio features
const fetch = require('node-fetch');

async function testSpotifyFeatures() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Spotify Audio Features API\n');
  
  // –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π access token
  // –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ data.json
  const fs = require('fs');
  const data = JSON.parse(fs.readFileSync('./apps/web/data.json', 'utf-8'));
  
  const userWithSpotify = data.users.find(u => u.spotifyProfile?.accessToken);
  
  if (!userWithSpotify) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Spotify —Ç–æ–∫–µ–Ω–æ–º');
    return;
  }
  
  console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userWithSpotify.email);
  console.log('üìÖ Token expires at:', userWithSpotify.spotifyProfile.expiresAt);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º top tracks
  const tracksResponse = await fetch(
    'https://api.spotify.com/v1/me/top/tracks?limit=5&time_range=short_term',
    {
      headers: {
        'Authorization': `Bearer ${userWithSpotify.spotifyProfile.accessToken}`
      }
    }
  );
  
  if (!tracksResponse.ok) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–µ–∫–æ–≤:', tracksResponse.status);
    console.log(await tracksResponse.text());
    return;
  }
  
  const tracks = await tracksResponse.json();
  console.log('\nüìÄ Top tracks –ø–æ–ª—É—á–µ–Ω—ã:', tracks.items.length);
  
  const trackIds = tracks.items.map(t => t.id).join(',');
  console.log('üéµ Track IDs:', trackIds);
  
  // –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏–º audio features
  const featuresUrl = `https://api.spotify.com/v1/audio-features?ids=${trackIds}`;
  console.log('\nüîó Features URL:', featuresUrl);
  
  const featuresResponse = await fetch(featuresUrl, {
    headers: {
      'Authorization': `Bearer ${userWithSpotify.spotifyProfile.accessToken}`
    }
  });
  
  console.log('üìä Features response status:', featuresResponse.status);
  
  const featuresData = await featuresResponse.json();
  console.log('\nüéØ Audio Features —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
  console.log(JSON.stringify(featuresData, null, 2));
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫
  if (featuresData.audio_features) {
    featuresData.audio_features.forEach((f, i) => {
      if (f === null) {
        console.log(`\n‚ö†Ô∏è  Track ${i} (${tracks.items[i]?.name}) - features = NULL`);
        console.log(`   ID: ${tracks.items[i]?.id}`);
        console.log(`   URI: ${tracks.items[i]?.uri}`);
      }
    });
  }
}

testSpotifyFeatures().catch(console.error);
